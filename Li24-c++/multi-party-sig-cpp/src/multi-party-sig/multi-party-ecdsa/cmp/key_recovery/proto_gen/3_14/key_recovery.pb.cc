// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmp/key_recovery.proto

#include "key_recovery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_curve_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurvePoint_curve_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DLogProof_V2_zkp_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace key_recovery {
class Round0P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round0P2PMessage> _instance;
} _Round0P2PMessage_default_instance_;
class Round1P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round1P2PMessage> _instance;
} _Round1P2PMessage_default_instance_;
class Round2P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round2P2PMessage> _instance;
} _Round2P2PMessage_default_instance_;
}  // namespace key_recovery
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static void InitDefaultsscc_info_Round0P2PMessage_cmp_2fkey_5frecovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::_Round0P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round0P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Round0P2PMessage_cmp_2fkey_5frecovery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Round0P2PMessage_cmp_2fkey_5frecovery_2eproto}, {}};

static void InitDefaultsscc_info_Round1P2PMessage_cmp_2fkey_5frecovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::_Round1P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Round1P2PMessage_cmp_2fkey_5frecovery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Round1P2PMessage_cmp_2fkey_5frecovery_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,
      &scc_info_DLogProof_V2_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round2P2PMessage_cmp_2fkey_5frecovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::_Round2P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round2P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Round2P2PMessage_cmp_2fkey_5frecovery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Round2P2PMessage_cmp_2fkey_5frecovery_2eproto}, {
      &scc_info_DLogProof_V2_zkp_2eproto.base,
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cmp_2fkey_5frecovery_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cmp_2fkey_5frecovery_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cmp_2fkey_5frecovery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cmp_2fkey_5frecovery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round0P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round0P2PMessage, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage, x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage, i_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage, j_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage, k_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage, a_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage, r_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage, t_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage, phi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round2P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round2P2PMessage, psi_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round2P2PMessage, x_ki_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round0P2PMessage)},
  { 6, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage)},
  { 19, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round2P2PMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::_Round0P2PMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::_Round1P2PMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::_Round2P2PMessage_default_instance_),
};

const char descriptor_table_protodef_cmp_2fkey_5frecovery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026cmp/key_recovery.proto\0222safeheron.prot"
  "o.multi_party_ecdsa.cmp.key_recovery\032\021cu"
  "rve_point.proto\032\tzkp.proto\"\035\n\020Round0P2PM"
  "essage\022\t\n\001V\030\001 \001(\t\"\377\001\n\020Round1P2PMessage\022&"
  "\n\001X\030\001 \001(\0132\033.safeheron.proto.CurvePoint\022\t"
  "\n\001i\030\002 \001(\t\022\t\n\001j\030\003 \001(\t\022\t\n\001k\030\004 \001(\t\022&\n\001A\030\005 \001"
  "(\0132\033.safeheron.proto.CurvePoint\022&\n\001R\030\006 \001"
  "(\0132\033.safeheron.proto.CurvePoint\022&\n\001T\030\007 \001"
  "(\0132\033.safeheron.proto.CurvePoint\022*\n\003phi\030\010"
  " \001(\0132\035.safeheron.proto.DLogProof_V2\"i\n\020R"
  "ound2P2PMessage\022*\n\003psi\030\001 \001(\0132\035.safeheron"
  ".proto.DLogProof_V2\022)\n\004X_ki\030\002 \001(\0132\033.safe"
  "heron.proto.CurvePointb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cmp_2fkey_5frecovery_2eproto_deps[2] = {
  &::descriptor_table_curve_5fpoint_2eproto,
  &::descriptor_table_zkp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cmp_2fkey_5frecovery_2eproto_sccs[3] = {
  &scc_info_Round0P2PMessage_cmp_2fkey_5frecovery_2eproto.base,
  &scc_info_Round1P2PMessage_cmp_2fkey_5frecovery_2eproto.base,
  &scc_info_Round2P2PMessage_cmp_2fkey_5frecovery_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cmp_2fkey_5frecovery_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cmp_2fkey_5frecovery_2eproto = {
  false, false, descriptor_table_protodef_cmp_2fkey_5frecovery_2eproto, "cmp/key_recovery.proto", 510,
  &descriptor_table_cmp_2fkey_5frecovery_2eproto_once, descriptor_table_cmp_2fkey_5frecovery_2eproto_sccs, descriptor_table_cmp_2fkey_5frecovery_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_cmp_2fkey_5frecovery_2eproto::offsets,
  file_level_metadata_cmp_2fkey_5frecovery_2eproto, 3, file_level_enum_descriptors_cmp_2fkey_5frecovery_2eproto, file_level_service_descriptors_cmp_2fkey_5frecovery_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cmp_2fkey_5frecovery_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cmp_2fkey_5frecovery_2eproto)), true);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace key_recovery {

// ===================================================================

class Round0P2PMessage::_Internal {
 public:
};

Round0P2PMessage::Round0P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
}
Round0P2PMessage::Round0P2PMessage(const Round0P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v().empty()) {
    v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
}

void Round0P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round0P2PMessage_cmp_2fkey_5frecovery_2eproto.base);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Round0P2PMessage::~Round0P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round0P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Round0P2PMessage::ArenaDtor(void* object) {
  Round0P2PMessage* _this = reinterpret_cast< Round0P2PMessage* >(object);
  (void)_this;
}
void Round0P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round0P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round0P2PMessage& Round0P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round0P2PMessage_cmp_2fkey_5frecovery_2eproto.base);
  return *internal_default_instance();
}


void Round0P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string V = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage.V"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round0P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string V = 1;
  if (this->v().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v().data(), static_cast<int>(this->_internal_v().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage.V");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
  return target;
}

size_t Round0P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string V = 1;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round0P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round0P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round0P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
    MergeFrom(*source);
  }
}

void Round0P2PMessage::MergeFrom(const Round0P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v().size() > 0) {
    _internal_set_v(from._internal_v());
  }
}

void Round0P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round0P2PMessage::CopyFrom(const Round0P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round0P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0P2PMessage::IsInitialized() const {
  return true;
}

void Round0P2PMessage::InternalSwap(Round0P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.Swap(&other->v_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round1P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& x(const Round1P2PMessage* msg);
  static const ::safeheron::proto::CurvePoint& a(const Round1P2PMessage* msg);
  static const ::safeheron::proto::CurvePoint& r(const Round1P2PMessage* msg);
  static const ::safeheron::proto::CurvePoint& t(const Round1P2PMessage* msg);
  static const ::safeheron::proto::DLogProof_V2& phi(const Round1P2PMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round1P2PMessage::_Internal::x(const Round1P2PMessage* msg) {
  return *msg->x_;
}
const ::safeheron::proto::CurvePoint&
Round1P2PMessage::_Internal::a(const Round1P2PMessage* msg) {
  return *msg->a_;
}
const ::safeheron::proto::CurvePoint&
Round1P2PMessage::_Internal::r(const Round1P2PMessage* msg) {
  return *msg->r_;
}
const ::safeheron::proto::CurvePoint&
Round1P2PMessage::_Internal::t(const Round1P2PMessage* msg) {
  return *msg->t_;
}
const ::safeheron::proto::DLogProof_V2&
Round1P2PMessage::_Internal::phi(const Round1P2PMessage* msg) {
  return *msg->phi_;
}
void Round1P2PMessage::clear_x() {
  if (GetArena() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
void Round1P2PMessage::clear_a() {
  if (GetArena() == nullptr && a_ != nullptr) {
    delete a_;
  }
  a_ = nullptr;
}
void Round1P2PMessage::clear_r() {
  if (GetArena() == nullptr && r_ != nullptr) {
    delete r_;
  }
  r_ = nullptr;
}
void Round1P2PMessage::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
void Round1P2PMessage::clear_phi() {
  if (GetArena() == nullptr && phi_ != nullptr) {
    delete phi_;
  }
  phi_ = nullptr;
}
Round1P2PMessage::Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
}
Round1P2PMessage::Round1P2PMessage(const Round1P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_i().empty()) {
    i_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_i(), 
      GetArena());
  }
  j_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_j().empty()) {
    j_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_j(), 
      GetArena());
  }
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k().empty()) {
    k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_k(), 
      GetArena());
  }
  if (from._internal_has_x()) {
    x_ = new ::safeheron::proto::CurvePoint(*from.x_);
  } else {
    x_ = nullptr;
  }
  if (from._internal_has_a()) {
    a_ = new ::safeheron::proto::CurvePoint(*from.a_);
  } else {
    a_ = nullptr;
  }
  if (from._internal_has_r()) {
    r_ = new ::safeheron::proto::CurvePoint(*from.r_);
  } else {
    r_ = nullptr;
  }
  if (from._internal_has_t()) {
    t_ = new ::safeheron::proto::CurvePoint(*from.t_);
  } else {
    t_ = nullptr;
  }
  if (from._internal_has_phi()) {
    phi_ = new ::safeheron::proto::DLogProof_V2(*from.phi_);
  } else {
    phi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
}

void Round1P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round1P2PMessage_cmp_2fkey_5frecovery_2eproto.base);
  i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  j_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&phi_) -
      reinterpret_cast<char*>(&x_)) + sizeof(phi_));
}

Round1P2PMessage::~Round1P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round1P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  j_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete a_;
  if (this != internal_default_instance()) delete r_;
  if (this != internal_default_instance()) delete t_;
  if (this != internal_default_instance()) delete phi_;
}

void Round1P2PMessage::ArenaDtor(void* object) {
  Round1P2PMessage* _this = reinterpret_cast< Round1P2PMessage* >(object);
  (void)_this;
}
void Round1P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round1P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round1P2PMessage& Round1P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round1P2PMessage_cmp_2fkey_5frecovery_2eproto.base);
  return *internal_default_instance();
}


void Round1P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i_.ClearToEmpty();
  j_.ClearToEmpty();
  k_.ClearToEmpty();
  if (GetArena() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
  if (GetArena() == nullptr && a_ != nullptr) {
    delete a_;
  }
  a_ = nullptr;
  if (GetArena() == nullptr && r_ != nullptr) {
    delete r_;
  }
  r_ = nullptr;
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  if (GetArena() == nullptr && phi_ != nullptr) {
    delete phi_;
  }
  phi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage.i"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string j = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_j();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage.j"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_k();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage.k"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint A = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint R = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_r(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint T = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.DLogProof_V2 phi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_phi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round1P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint X = 1;
  if (this->has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::x(this), target, stream);
  }

  // string i = 2;
  if (this->i().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_i().data(), static_cast<int>(this->_internal_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage.i");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i(), target);
  }

  // string j = 3;
  if (this->j().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_j().data(), static_cast<int>(this->_internal_j().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage.j");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_j(), target);
  }

  // string k = 4;
  if (this->k().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_k().data(), static_cast<int>(this->_internal_k().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage.k");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_k(), target);
  }

  // .safeheron.proto.CurvePoint A = 5;
  if (this->has_a()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::a(this), target, stream);
  }

  // .safeheron.proto.CurvePoint R = 6;
  if (this->has_r()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::r(this), target, stream);
  }

  // .safeheron.proto.CurvePoint T = 7;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::t(this), target, stream);
  }

  // .safeheron.proto.DLogProof_V2 phi = 8;
  if (this->has_phi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::phi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
  return target;
}

size_t Round1P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string i = 2;
  if (this->i().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_i());
  }

  // string j = 3;
  if (this->j().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_j());
  }

  // string k = 4;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_k());
  }

  // .safeheron.proto.CurvePoint X = 1;
  if (this->has_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .safeheron.proto.CurvePoint A = 5;
  if (this->has_a()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_);
  }

  // .safeheron.proto.CurvePoint R = 6;
  if (this->has_r()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *r_);
  }

  // .safeheron.proto.CurvePoint T = 7;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .safeheron.proto.DLogProof_V2 phi = 8;
  if (this->has_phi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phi_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round1P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round1P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round1P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
    MergeFrom(*source);
  }
}

void Round1P2PMessage::MergeFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.i().size() > 0) {
    _internal_set_i(from._internal_i());
  }
  if (from.j().size() > 0) {
    _internal_set_j(from._internal_j());
  }
  if (from.k().size() > 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.has_x()) {
    _internal_mutable_x()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_x());
  }
  if (from.has_a()) {
    _internal_mutable_a()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_a());
  }
  if (from.has_r()) {
    _internal_mutable_r()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_r());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_t());
  }
  if (from.has_phi()) {
    _internal_mutable_phi()->::safeheron::proto::DLogProof_V2::MergeFrom(from._internal_phi());
  }
}

void Round1P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round1P2PMessage::CopyFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1P2PMessage::IsInitialized() const {
  return true;
}

void Round1P2PMessage::InternalSwap(Round1P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  i_.Swap(&other->i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  j_.Swap(&other->j_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  k_.Swap(&other->k_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round1P2PMessage, phi_)
      + sizeof(Round1P2PMessage::phi_)
      - PROTOBUF_FIELD_OFFSET(Round1P2PMessage, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round2P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::DLogProof_V2& psi(const Round2P2PMessage* msg);
  static const ::safeheron::proto::CurvePoint& x_ki(const Round2P2PMessage* msg);
};

const ::safeheron::proto::DLogProof_V2&
Round2P2PMessage::_Internal::psi(const Round2P2PMessage* msg) {
  return *msg->psi_;
}
const ::safeheron::proto::CurvePoint&
Round2P2PMessage::_Internal::x_ki(const Round2P2PMessage* msg) {
  return *msg->x_ki_;
}
void Round2P2PMessage::clear_psi() {
  if (GetArena() == nullptr && psi_ != nullptr) {
    delete psi_;
  }
  psi_ = nullptr;
}
void Round2P2PMessage::clear_x_ki() {
  if (GetArena() == nullptr && x_ki_ != nullptr) {
    delete x_ki_;
  }
  x_ki_ = nullptr;
}
Round2P2PMessage::Round2P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
}
Round2P2PMessage::Round2P2PMessage(const Round2P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_psi()) {
    psi_ = new ::safeheron::proto::DLogProof_V2(*from.psi_);
  } else {
    psi_ = nullptr;
  }
  if (from._internal_has_x_ki()) {
    x_ki_ = new ::safeheron::proto::CurvePoint(*from.x_ki_);
  } else {
    x_ki_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
}

void Round2P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round2P2PMessage_cmp_2fkey_5frecovery_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&psi_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&x_ki_) -
      reinterpret_cast<char*>(&psi_)) + sizeof(x_ki_));
}

Round2P2PMessage::~Round2P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round2P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete psi_;
  if (this != internal_default_instance()) delete x_ki_;
}

void Round2P2PMessage::ArenaDtor(void* object) {
  Round2P2PMessage* _this = reinterpret_cast< Round2P2PMessage* >(object);
  (void)_this;
}
void Round2P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round2P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round2P2PMessage& Round2P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round2P2PMessage_cmp_2fkey_5frecovery_2eproto.base);
  return *internal_default_instance();
}


void Round2P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && psi_ != nullptr) {
    delete psi_;
  }
  psi_ = nullptr;
  if (GetArena() == nullptr && x_ki_ != nullptr) {
    delete x_ki_;
  }
  x_ki_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round2P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.DLogProof_V2 psi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint X_ki = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_x_ki(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round2P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.DLogProof_V2 psi = 1;
  if (this->has_psi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::psi(this), target, stream);
  }

  // .safeheron.proto.CurvePoint X_ki = 2;
  if (this->has_x_ki()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::x_ki(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
  return target;
}

size_t Round2P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.DLogProof_V2 psi = 1;
  if (this->has_psi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_);
  }

  // .safeheron.proto.CurvePoint X_ki = 2;
  if (this->has_x_ki()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *x_ki_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round2P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round2P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round2P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
    MergeFrom(*source);
  }
}

void Round2P2PMessage::MergeFrom(const Round2P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_psi()) {
    _internal_mutable_psi()->::safeheron::proto::DLogProof_V2::MergeFrom(from._internal_psi());
  }
  if (from.has_x_ki()) {
    _internal_mutable_x_ki()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_x_ki());
  }
}

void Round2P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round2P2PMessage::CopyFrom(const Round2P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.key_recovery.Round2P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round2P2PMessage::IsInitialized() const {
  return true;
}

void Round2P2PMessage::InternalSwap(Round2P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round2P2PMessage, x_ki_)
      + sizeof(Round2P2PMessage::x_ki_)
      - PROTOBUF_FIELD_OFFSET(Round2P2PMessage, psi_)>(
          reinterpret_cast<char*>(&psi_),
          reinterpret_cast<char*>(&other->psi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round2P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace key_recovery
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round0P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round0P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round0P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round1P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round2P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round2P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::key_recovery::Round2P2PMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
