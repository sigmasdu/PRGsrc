// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Li24/sign.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Li24_2fsign_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Li24_2fsign_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crypto-suites/crypto-curve/proto_gen/curve_point.pb.switch.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Li24_2fsign_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Li24_2fsign_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Li24_2fsign_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace Li24 {
namespace sign {
class Round0BCMessage;
class Round0BCMessageDefaultTypeInternal;
extern Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
class Round0P2PMessage;
class Round0P2PMessageDefaultTypeInternal;
extern Round0P2PMessageDefaultTypeInternal _Round0P2PMessage_default_instance_;
class Round1P2PMessage;
class Round1P2PMessageDefaultTypeInternal;
extern Round1P2PMessageDefaultTypeInternal _Round1P2PMessage_default_instance_;
}  // namespace sign
}  // namespace Li24
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::multi_party_ecdsa::Li24::sign::Round0BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::Li24::sign::Round0BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::Li24::sign::Round0P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::Li24::sign::Round0P2PMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::Li24::sign::Round1P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::Li24::sign::Round1P2PMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace Li24 {
namespace sign {

// ===================================================================

class Round0BCMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0BCMessage) */ {
 public:
  inline Round0BCMessage() : Round0BCMessage(nullptr) {}
  virtual ~Round0BCMessage();

  Round0BCMessage(const Round0BCMessage& from);
  Round0BCMessage(Round0BCMessage&& from) noexcept
    : Round0BCMessage() {
    *this = ::std::move(from);
  }

  inline Round0BCMessage& operator=(const Round0BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round0BCMessage& operator=(Round0BCMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round0BCMessage& default_instance();

  static inline const Round0BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round0BCMessage*>(
               &_Round0BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Round0BCMessage& a, Round0BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round0BCMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round0BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round0BCMessage* New() const final {
    return CreateMaybeMessage<Round0BCMessage>(nullptr);
  }

  Round0BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round0BCMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round0BCMessage& from);
  void MergeFrom(const Round0BCMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round0BCMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.Li24.sign.Round0BCMessage";
  }
  protected:
  explicit Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Li24_2fsign_2eproto);
    return ::descriptor_table_Li24_2fsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGKFieldNumber = 1,
  };
  // .safeheron.proto.CurvePoint GK = 1;
  bool has_gk() const;
  private:
  bool _internal_has_gk() const;
  public:
  void clear_gk();
  const ::safeheron::proto::CurvePoint& gk() const;
  ::safeheron::proto::CurvePoint* release_gk();
  ::safeheron::proto::CurvePoint* mutable_gk();
  void set_allocated_gk(::safeheron::proto::CurvePoint* gk);
  private:
  const ::safeheron::proto::CurvePoint& _internal_gk() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_gk();
  public:
  void unsafe_arena_set_allocated_gk(
      ::safeheron::proto::CurvePoint* gk);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_gk();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::safeheron::proto::CurvePoint* gk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Li24_2fsign_2eproto;
};
// -------------------------------------------------------------------

class Round0P2PMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage) */ {
 public:
  inline Round0P2PMessage() : Round0P2PMessage(nullptr) {}
  virtual ~Round0P2PMessage();

  Round0P2PMessage(const Round0P2PMessage& from);
  Round0P2PMessage(Round0P2PMessage&& from) noexcept
    : Round0P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round0P2PMessage& operator=(const Round0P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round0P2PMessage& operator=(Round0P2PMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round0P2PMessage& default_instance();

  static inline const Round0P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round0P2PMessage*>(
               &_Round0P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Round0P2PMessage& a, Round0P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round0P2PMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round0P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round0P2PMessage* New() const final {
    return CreateMaybeMessage<Round0P2PMessage>(nullptr);
  }

  Round0P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round0P2PMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round0P2PMessage& from);
  void MergeFrom(const Round0P2PMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round0P2PMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage";
  }
  protected:
  explicit Round0P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Li24_2fsign_2eproto);
    return ::descriptor_table_Li24_2fsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kKFieldNumber = 2,
    kPhiFieldNumber = 3,
  };
  // string w = 1;
  void clear_w();
  const std::string& w() const;
  void set_w(const std::string& value);
  void set_w(std::string&& value);
  void set_w(const char* value);
  void set_w(const char* value, size_t size);
  std::string* mutable_w();
  std::string* release_w();
  void set_allocated_w(std::string* w);
  private:
  const std::string& _internal_w() const;
  void _internal_set_w(const std::string& value);
  std::string* _internal_mutable_w();
  public:

  // string k = 2;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const char* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // string phi = 3;
  void clear_phi();
  const std::string& phi() const;
  void set_phi(const std::string& value);
  void set_phi(std::string&& value);
  void set_phi(const char* value);
  void set_phi(const char* value, size_t size);
  std::string* mutable_phi();
  std::string* release_phi();
  void set_allocated_phi(std::string* phi);
  private:
  const std::string& _internal_phi() const;
  void _internal_set_phi(const std::string& value);
  std::string* _internal_mutable_phi();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr w_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Li24_2fsign_2eproto;
};
// -------------------------------------------------------------------

class Round1P2PMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage) */ {
 public:
  inline Round1P2PMessage() : Round1P2PMessage(nullptr) {}
  virtual ~Round1P2PMessage();

  Round1P2PMessage(const Round1P2PMessage& from);
  Round1P2PMessage(Round1P2PMessage&& from) noexcept
    : Round1P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round1P2PMessage& operator=(const Round1P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round1P2PMessage& operator=(Round1P2PMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round1P2PMessage& default_instance();

  static inline const Round1P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round1P2PMessage*>(
               &_Round1P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Round1P2PMessage& a, Round1P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round1P2PMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round1P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round1P2PMessage* New() const final {
    return CreateMaybeMessage<Round1P2PMessage>(nullptr);
  }

  Round1P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round1P2PMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round1P2PMessage& from);
  void MergeFrom(const Round1P2PMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round1P2PMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage";
  }
  protected:
  explicit Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Li24_2fsign_2eproto);
    return ::descriptor_table_Li24_2fsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaFieldNumber = 1,
    kVFieldNumber = 2,
  };
  // string delta = 1;
  void clear_delta();
  const std::string& delta() const;
  void set_delta(const std::string& value);
  void set_delta(std::string&& value);
  void set_delta(const char* value);
  void set_delta(const char* value, size_t size);
  std::string* mutable_delta();
  std::string* release_delta();
  void set_allocated_delta(std::string* delta);
  private:
  const std::string& _internal_delta() const;
  void _internal_set_delta(const std::string& value);
  std::string* _internal_mutable_delta();
  public:

  // string v = 2;
  void clear_v();
  const std::string& v() const;
  void set_v(const std::string& value);
  void set_v(std::string&& value);
  void set_v(const char* value);
  void set_v(const char* value, size_t size);
  std::string* mutable_v();
  std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Li24_2fsign_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Round0BCMessage

// .safeheron.proto.CurvePoint GK = 1;
inline bool Round0BCMessage::_internal_has_gk() const {
  return this != internal_default_instance() && gk_ != nullptr;
}
inline bool Round0BCMessage::has_gk() const {
  return _internal_has_gk();
}
inline const ::safeheron::proto::CurvePoint& Round0BCMessage::_internal_gk() const {
  const ::safeheron::proto::CurvePoint* p = gk_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round0BCMessage::gk() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0BCMessage.GK)
  return _internal_gk();
}
inline void Round0BCMessage::unsafe_arena_set_allocated_gk(
    ::safeheron::proto::CurvePoint* gk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gk_);
  }
  gk_ = gk;
  if (gk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0BCMessage.GK)
}
inline ::safeheron::proto::CurvePoint* Round0BCMessage::release_gk() {
  
  ::safeheron::proto::CurvePoint* temp = gk_;
  gk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round0BCMessage::unsafe_arena_release_gk() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0BCMessage.GK)
  
  ::safeheron::proto::CurvePoint* temp = gk_;
  gk_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round0BCMessage::_internal_mutable_gk() {
  
  if (gk_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    gk_ = p;
  }
  return gk_;
}
inline ::safeheron::proto::CurvePoint* Round0BCMessage::mutable_gk() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0BCMessage.GK)
  return _internal_mutable_gk();
}
inline void Round0BCMessage::set_allocated_gk(::safeheron::proto::CurvePoint* gk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gk_);
  }
  if (gk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gk)->GetArena();
    if (message_arena != submessage_arena) {
      gk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gk, submessage_arena);
    }
    
  } else {
    
  }
  gk_ = gk;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0BCMessage.GK)
}

// -------------------------------------------------------------------

// Round0P2PMessage

// string w = 1;
inline void Round0P2PMessage::clear_w() {
  w_.ClearToEmpty();
}
inline const std::string& Round0P2PMessage::w() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.w)
  return _internal_w();
}
inline void Round0P2PMessage::set_w(const std::string& value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.w)
}
inline std::string* Round0P2PMessage::mutable_w() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.w)
  return _internal_mutable_w();
}
inline const std::string& Round0P2PMessage::_internal_w() const {
  return w_.Get();
}
inline void Round0P2PMessage::_internal_set_w(const std::string& value) {
  
  w_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0P2PMessage::set_w(std::string&& value) {
  
  w_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.w)
}
inline void Round0P2PMessage::set_w(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  w_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.w)
}
inline void Round0P2PMessage::set_w(const char* value,
    size_t size) {
  
  w_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.w)
}
inline std::string* Round0P2PMessage::_internal_mutable_w() {
  
  return w_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0P2PMessage::release_w() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.w)
  return w_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0P2PMessage::set_allocated_w(std::string* w) {
  if (w != nullptr) {
    
  } else {
    
  }
  w_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), w,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.w)
}

// string k = 2;
inline void Round0P2PMessage::clear_k() {
  k_.ClearToEmpty();
}
inline const std::string& Round0P2PMessage::k() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.k)
  return _internal_k();
}
inline void Round0P2PMessage::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.k)
}
inline std::string* Round0P2PMessage::mutable_k() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.k)
  return _internal_mutable_k();
}
inline const std::string& Round0P2PMessage::_internal_k() const {
  return k_.Get();
}
inline void Round0P2PMessage::_internal_set_k(const std::string& value) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0P2PMessage::set_k(std::string&& value) {
  
  k_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.k)
}
inline void Round0P2PMessage::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.k)
}
inline void Round0P2PMessage::set_k(const char* value,
    size_t size) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.k)
}
inline std::string* Round0P2PMessage::_internal_mutable_k() {
  
  return k_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0P2PMessage::release_k() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.k)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0P2PMessage::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.k)
}

// string phi = 3;
inline void Round0P2PMessage::clear_phi() {
  phi_.ClearToEmpty();
}
inline const std::string& Round0P2PMessage::phi() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.phi)
  return _internal_phi();
}
inline void Round0P2PMessage::set_phi(const std::string& value) {
  _internal_set_phi(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.phi)
}
inline std::string* Round0P2PMessage::mutable_phi() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.phi)
  return _internal_mutable_phi();
}
inline const std::string& Round0P2PMessage::_internal_phi() const {
  return phi_.Get();
}
inline void Round0P2PMessage::_internal_set_phi(const std::string& value) {
  
  phi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0P2PMessage::set_phi(std::string&& value) {
  
  phi_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.phi)
}
inline void Round0P2PMessage::set_phi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.phi)
}
inline void Round0P2PMessage::set_phi(const char* value,
    size_t size) {
  
  phi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.phi)
}
inline std::string* Round0P2PMessage::_internal_mutable_phi() {
  
  return phi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0P2PMessage::release_phi() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.phi)
  return phi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0P2PMessage::set_allocated_phi(std::string* phi) {
  if (phi != nullptr) {
    
  } else {
    
  }
  phi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phi,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.Li24.sign.Round0P2PMessage.phi)
}

// -------------------------------------------------------------------

// Round1P2PMessage

// string delta = 1;
inline void Round1P2PMessage::clear_delta() {
  delta_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::delta() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.delta)
  return _internal_delta();
}
inline void Round1P2PMessage::set_delta(const std::string& value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.delta)
}
inline std::string* Round1P2PMessage::mutable_delta() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.delta)
  return _internal_mutable_delta();
}
inline const std::string& Round1P2PMessage::_internal_delta() const {
  return delta_.Get();
}
inline void Round1P2PMessage::_internal_set_delta(const std::string& value) {
  
  delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_delta(std::string&& value) {
  
  delta_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.delta)
}
inline void Round1P2PMessage::set_delta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.delta)
}
inline void Round1P2PMessage::set_delta(const char* value,
    size_t size) {
  
  delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.delta)
}
inline std::string* Round1P2PMessage::_internal_mutable_delta() {
  
  return delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_delta() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.delta)
  return delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_delta(std::string* delta) {
  if (delta != nullptr) {
    
  } else {
    
  }
  delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delta,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.delta)
}

// string v = 2;
inline void Round1P2PMessage::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::v() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.v)
  return _internal_v();
}
inline void Round1P2PMessage::set_v(const std::string& value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.v)
}
inline std::string* Round1P2PMessage::mutable_v() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.v)
  return _internal_mutable_v();
}
inline const std::string& Round1P2PMessage::_internal_v() const {
  return v_.Get();
}
inline void Round1P2PMessage::_internal_set_v(const std::string& value) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_v(std::string&& value) {
  
  v_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.v)
}
inline void Round1P2PMessage::set_v(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.v)
}
inline void Round1P2PMessage::set_v(const char* value,
    size_t size) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.v)
}
inline std::string* Round1P2PMessage::_internal_mutable_v() {
  
  return v_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_v() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.v)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.Li24.sign.Round1P2PMessage.v)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sign
}  // namespace Li24
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Li24_2fsign_2eproto
