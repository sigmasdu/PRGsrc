// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Li24/struct.proto

#include "struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_curve_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurvePoint_curve_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Li24_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Party_Li24_2fstruct_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace Li24 {
class PartyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Party> _instance;
} _Party_default_instance_;
class SignKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignKey> _instance;
} _SignKey_default_instance_;
}  // namespace Li24
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static void InitDefaultsscc_info_Party_Li24_2fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::Li24::_Party_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::Li24::Party();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Party_Li24_2fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Party_Li24_2fstruct_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_SignKey_Li24_2fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::Li24::_SignKey_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::Li24::SignKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignKey_Li24_2fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SignKey_Li24_2fstruct_2eproto}, {
      &scc_info_Party_Li24_2fstruct_2eproto.base,
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Li24_2fstruct_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Li24_2fstruct_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Li24_2fstruct_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Li24_2fstruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::Party, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::Party, party_id_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::Party, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::Party, x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::Party, g_x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::Party, seed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::SignKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::SignKey, workspace_id_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::SignKey, threshold_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::SignKey, n_parties_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::SignKey, local_party_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::SignKey, remote_parties_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::Li24::SignKey, g_x_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::safeheron::proto::multi_party_ecdsa::Li24::Party)},
  { 10, -1, sizeof(::safeheron::proto::multi_party_ecdsa::Li24::SignKey)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::Li24::_Party_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::Li24::_SignKey_default_instance_),
};

const char descriptor_table_protodef_Li24_2fstruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021Li24/struct.proto\022&safeheron.proto.mul"
  "ti_party_ecdsa.Li24\032\021curve_point.proto\032\016"
  "paillier.proto\"k\n\005Party\022\020\n\010party_id\030\001 \001("
  "\t\022\r\n\005index\030\003 \001(\t\022\t\n\001x\030\010 \001(\t\022(\n\003g_x\030\t \001(\013"
  "2\033.safeheron.proto.CurvePoint\022\014\n\004seed\030\n "
  "\003(\t\"\372\001\n\007SignKey\022\024\n\014workspace_id\030\001 \001(\t\022\021\n"
  "\tthreshold\030\002 \001(\005\022\021\n\tn_parties\030\003 \001(\005\022B\n\013l"
  "ocal_party\030\005 \001(\0132-.safeheron.proto.multi"
  "_party_ecdsa.Li24.Party\022E\n\016remote_partie"
  "s\030\006 \003(\0132-.safeheron.proto.multi_party_ec"
  "dsa.Li24.Party\022(\n\003g_x\030\007 \001(\0132\033.safeheron."
  "proto.CurvePointb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Li24_2fstruct_2eproto_deps[2] = {
  &::descriptor_table_curve_5fpoint_2eproto,
  &::descriptor_table_paillier_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Li24_2fstruct_2eproto_sccs[2] = {
  &scc_info_Party_Li24_2fstruct_2eproto.base,
  &scc_info_SignKey_Li24_2fstruct_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Li24_2fstruct_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Li24_2fstruct_2eproto = {
  false, false, descriptor_table_protodef_Li24_2fstruct_2eproto, "Li24/struct.proto", 464,
  &descriptor_table_Li24_2fstruct_2eproto_once, descriptor_table_Li24_2fstruct_2eproto_sccs, descriptor_table_Li24_2fstruct_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_Li24_2fstruct_2eproto::offsets,
  file_level_metadata_Li24_2fstruct_2eproto, 2, file_level_enum_descriptors_Li24_2fstruct_2eproto, file_level_service_descriptors_Li24_2fstruct_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Li24_2fstruct_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Li24_2fstruct_2eproto)), true);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace Li24 {

// ===================================================================

class Party::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& g_x(const Party* msg);
};

const ::safeheron::proto::CurvePoint&
Party::_Internal::g_x(const Party* msg) {
  return *msg->g_x_;
}
void Party::clear_g_x() {
  if (GetArena() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
}
Party::Party(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  seed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.Li24.Party)
}
Party::Party(const Party& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seed_(from.seed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party_id().empty()) {
    party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party_id(), 
      GetArena());
  }
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  x_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_x().empty()) {
    x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_x(), 
      GetArena());
  }
  if (from._internal_has_g_x()) {
    g_x_ = new ::safeheron::proto::CurvePoint(*from.g_x_);
  } else {
    g_x_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.Li24.Party)
}

void Party::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Party_Li24_2fstruct_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  x_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  g_x_ = nullptr;
}

Party::~Party() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.Li24.Party)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Party::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  x_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete g_x_;
}

void Party::ArenaDtor(void* object) {
  Party* _this = reinterpret_cast< Party* >(object);
  (void)_this;
}
void Party::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Party::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Party& Party::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Party_Li24_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void Party::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.Li24.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seed_.Clear();
  party_id_.ClearToEmpty();
  index_.ClearToEmpty();
  x_.ClearToEmpty();
  if (GetArena() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Party::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.Li24.Party.party_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.Li24.Party.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_x();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.Li24.Party.x"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string seed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_seed();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.Li24.Party.seed"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Party::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.Li24.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.Li24.Party.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string index = 3;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.Li24.Party.index");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index(), target);
  }

  // string x = 8;
  if (this->x().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x().data(), static_cast<int>(this->_internal_x().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.Li24.Party.x");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_x(), target);
  }

  // .safeheron.proto.CurvePoint g_x = 9;
  if (this->has_g_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::g_x(this), target, stream);
  }

  // repeated string seed = 10;
  for (int i = 0, n = this->_internal_seed_size(); i < n; i++) {
    const auto& s = this->_internal_seed(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.Li24.Party.seed");
    target = stream->WriteString(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.Li24.Party)
  return target;
}

size_t Party::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.Li24.Party)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string seed = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(seed_.size());
  for (int i = 0, n = seed_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      seed_.Get(i));
  }

  // string party_id = 1;
  if (this->party_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string index = 3;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string x = 8;
  if (this->x().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x());
  }

  // .safeheron.proto.CurvePoint g_x = 9;
  if (this->has_g_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_x_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Party::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.Li24.Party)
  GOOGLE_DCHECK_NE(&from, this);
  const Party* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Party>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.Li24.Party)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.Li24.Party)
    MergeFrom(*source);
  }
}

void Party::MergeFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.Li24.Party)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seed_.MergeFrom(from.seed_);
  if (from.party_id().size() > 0) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.x().size() > 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.has_g_x()) {
    _internal_mutable_g_x()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_x());
  }
}

void Party::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.Li24.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Party::CopyFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.Li24.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Party::IsInitialized() const {
  return true;
}

void Party::InternalSwap(Party* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seed_.InternalSwap(&other->seed_);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  x_.Swap(&other->x_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(g_x_, other->g_x_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Party::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignKey::_Internal {
 public:
  static const ::safeheron::proto::multi_party_ecdsa::Li24::Party& local_party(const SignKey* msg);
  static const ::safeheron::proto::CurvePoint& g_x(const SignKey* msg);
};

const ::safeheron::proto::multi_party_ecdsa::Li24::Party&
SignKey::_Internal::local_party(const SignKey* msg) {
  return *msg->local_party_;
}
const ::safeheron::proto::CurvePoint&
SignKey::_Internal::g_x(const SignKey* msg) {
  return *msg->g_x_;
}
void SignKey::clear_g_x() {
  if (GetArena() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
}
SignKey::SignKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  remote_parties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
}
SignKey::SignKey(const SignKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remote_parties_(from.remote_parties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workspace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workspace_id().empty()) {
    workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workspace_id(), 
      GetArena());
  }
  if (from._internal_has_local_party()) {
    local_party_ = new ::safeheron::proto::multi_party_ecdsa::Li24::Party(*from.local_party_);
  } else {
    local_party_ = nullptr;
  }
  if (from._internal_has_g_x()) {
    g_x_ = new ::safeheron::proto::CurvePoint(*from.g_x_);
  } else {
    g_x_ = nullptr;
  }
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_parties_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(n_parties_));
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
}

void SignKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignKey_Li24_2fstruct_2eproto.base);
  workspace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&local_party_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&n_parties_) -
      reinterpret_cast<char*>(&local_party_)) + sizeof(n_parties_));
}

SignKey::~SignKey() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  workspace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete local_party_;
  if (this != internal_default_instance()) delete g_x_;
}

void SignKey::ArenaDtor(void* object) {
  SignKey* _this = reinterpret_cast< SignKey* >(object);
  (void)_this;
}
void SignKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignKey& SignKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignKey_Li24_2fstruct_2eproto.base);
  return *internal_default_instance();
}


void SignKey::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_parties_.Clear();
  workspace_id_.ClearToEmpty();
  if (GetArena() == nullptr && local_party_ != nullptr) {
    delete local_party_;
  }
  local_party_ = nullptr;
  if (GetArena() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_parties_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(n_parties_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string workspace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_workspace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.Li24.SignKey.workspace_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_parties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          n_parties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.multi_party_ecdsa.Li24.Party local_party = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .safeheron.proto.multi_party_ecdsa.Li24.Party remote_parties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_parties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string workspace_id = 1;
  if (this->workspace_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workspace_id().data(), static_cast<int>(this->_internal_workspace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.Li24.SignKey.workspace_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workspace_id(), target);
  }

  // int32 threshold = 2;
  if (this->threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_threshold(), target);
  }

  // int32 n_parties = 3;
  if (this->n_parties() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_n_parties(), target);
  }

  // .safeheron.proto.multi_party_ecdsa.Li24.Party local_party = 5;
  if (this->has_local_party()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::local_party(this), target, stream);
  }

  // repeated .safeheron.proto.multi_party_ecdsa.Li24.Party remote_parties = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remote_parties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_remote_parties(i), target, stream);
  }

  // .safeheron.proto.CurvePoint g_x = 7;
  if (this->has_g_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::g_x(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
  return target;
}

size_t SignKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safeheron.proto.multi_party_ecdsa.Li24.Party remote_parties = 6;
  total_size += 1UL * this->_internal_remote_parties_size();
  for (const auto& msg : this->remote_parties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workspace_id = 1;
  if (this->workspace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workspace_id());
  }

  // .safeheron.proto.multi_party_ecdsa.Li24.Party local_party = 5;
  if (this->has_local_party()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_party_);
  }

  // .safeheron.proto.CurvePoint g_x = 7;
  if (this->has_g_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_x_);
  }

  // int32 threshold = 2;
  if (this->threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_threshold());
  }

  // int32 n_parties = 3;
  if (this->n_parties() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n_parties());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SignKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
    MergeFrom(*source);
  }
}

void SignKey::MergeFrom(const SignKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remote_parties_.MergeFrom(from.remote_parties_);
  if (from.workspace_id().size() > 0) {
    _internal_set_workspace_id(from._internal_workspace_id());
  }
  if (from.has_local_party()) {
    _internal_mutable_local_party()->::safeheron::proto::multi_party_ecdsa::Li24::Party::MergeFrom(from._internal_local_party());
  }
  if (from.has_g_x()) {
    _internal_mutable_g_x()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_x());
  }
  if (from.threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  if (from.n_parties() != 0) {
    _internal_set_n_parties(from._internal_n_parties());
  }
}

void SignKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignKey::CopyFrom(const SignKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.Li24.SignKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignKey::IsInitialized() const {
  return true;
}

void SignKey::InternalSwap(SignKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  remote_parties_.InternalSwap(&other->remote_parties_);
  workspace_id_.Swap(&other->workspace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignKey, n_parties_)
      + sizeof(SignKey::n_parties_)
      - PROTOBUF_FIELD_OFFSET(SignKey, local_party_)>(
          reinterpret_cast<char*>(&local_party_),
          reinterpret_cast<char*>(&other->local_party_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignKey::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Li24
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::Li24::Party* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::Li24::Party >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::Li24::Party >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::Li24::SignKey* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::Li24::SignKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::Li24::SignKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
